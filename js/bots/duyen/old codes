Extra codes


// Hunger 
duyen.hunger = {
    amount: 0,
    eat: function(food_amount) {
        this.amount -= food_amount;
        this.amount = Math.max(0,this.amount); // Don't allow hunger to go below 0
    },
    update: function() {
        if(this.amount >= 100) {
            // Do nothing.  Hunger is capped. 
        } else {
            this.amount++;
        }
    },
    toString: function() {
        var hungerLevel = "";
        if (this.amount < 30) {
            hungerLevel = "Full";
        } else if (this.amount < 70) {            
            hungerLevel = "Hungry";
        } else if (this.amount < 85) {            
            hungerLevel = "Starving";
        } else {            
            hungerLevel = "Feed Me!";
        }
        return hungerLevel + " (Hunger = " + this.amount + ")";
    }
}




//Hygiene
duyen.hygiene = {
    amount: 0,
    clean: function(clean_amount) {
        this.amount -= clean_amount;
        this.amount = Math.max(0, this.amount); // There's a limit to being dirty
    },
    update: function() {
        if (this.amount >= 100) {
            // Do nothing.  hygiene is capped. 
        } else {
            this.amount++;
        }
    },
    toString: function() {
        var hygieneLevel = "";
        if (this.amount < 40) {
            hygieneLevel = "Clean";
        } else if (this.amount < 85) {
            hygieneLevel = "Dirty";
        } else {
            hygieneLevel = "Filthy";
        }
        return hygieneLevel + " (Dirtiness = " + this.amount + ")";
    }
}



//
// Motion modes
//
duyen.floating = {
    description: "floating",
    update: function() {
        // Slight tilting when moving
        if (Math.random() < .5) {
            duyen.incrementAngle(10 * Math.random() - 5);

        }
        // A leisurely place
        duyen.body.speed = 75;
    }
}
duyen.stop = {
    description: "resting",
    update: function() {
        // Stand stop
        duyen.body.speed = 0;
    }
}
duyen.flying = {
    description: "flying",
    update: function() {
        // Change angle rarely and just a bit
        if (Math.random() < .5) {
            duyen.incrementAngle(10 * Math.random() - 5);
        }
        // Slow
        duyen.body.speed = 250;
    }
}

//
// emotions states
//
/*duyen.happy = {
    name: "happy",
    transitionProbability: .05,
    transition: function() {
        if (Math.random() < .8) {
            return duyen.happy;
        } else {
            return duyen.sad;
        }
    },
    getMotionMode: function() {
        if (Math.random() < .8) {
            return duyen.floating;
        } else {
            return duyen.stop;
        }
    }
}
duyen.mad = {
    name: "mad",
    transitionProbability: .2,
    transition: function() {
        // Leave this state 80% of the time
        if (Math.random() < .8) {
            return duyen.happy;
        } else {
            return duyen.mad;
        }
    },
    getMotionMode: function() {
        return duyen.flying;
    }

}
duyen.sad = {
    name: "sad",
    transitionProbability: .3,
    transition: function() {
        if (Math.random() < .8) {
            return duyen.happy;
        } else {
            return duyen.mad;
        }
    },
    getMotionMode: function() {
        if (Math.random() < .4) {
            return duyen.floating;
        } else {
            return duyen.flying;
        }
    }
}*/



duyen.emotions = new MarkovProcess("calm");
duyen.emotions.add("calm", [
    ["calm", "happy", "mad", "sad"],
    [.7, .2, .05, .05]
]);
duyen.emotions.add("happy", [
    ["happy", "calm"],
    [.7, .3]
]);
duyen.emotions.add("mad", [
    ["mad", "calm", "sad"],
    [.7, .1, .2]
]);
duyen.emotions.add("sad", [
    ["sad", "calm", "mad"],
    [.6, .2, .2]
]);



// Current States
duyen.emotions = duyen.happy;
duyen.motionMode = duyen.floating;